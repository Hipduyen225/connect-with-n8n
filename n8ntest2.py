import streamlit as st
import requests
import uuid

# Webhook URL ƒë√∫ng (production) cho ph·∫ßn upload file
WEBHOOK_URL_PDFS = "https://n8n.khtt.online/webhook/getpdfs"  # URL Webhook cho PDF

# Header Auth ƒë√∫ng v·ªõi n8n
HEADERS = {
    "phuongduyen": "phuongduyentestcvdataset",  # Thay b·∫±ng ƒë√∫ng token b·∫°n ƒë√£ nh·∫≠p ·ªü n8n
    "Content-Type": "application/json"
}

def generate_session_id():
    """
    Generate a unique session ID using UUID.
    """
    return str(uuid.uuid4())

def send_pdfs_to_n8n(files):
    """
    G·ª≠i file PDF t·ªõi webhook n8n ƒë·ªÉ x·ª≠ l√Ω v√† ki·ªÉm tra k·∫øt qu·∫£ t·ª´ webhook.
    """
    webhook_url = WEBHOOK_URL_PDFS
    headers = HEADERS

    # T·∫°o payload d·ªØ li·ªáu c·ªßa file ƒë·ªÉ g·ª≠i ƒë·∫øn webhook n8n
    files_payload = []
    for file in files:
        file_content = file.read()  # ƒê·ªçc d·ªØ li·ªáu file
        files_payload.append({
            'name': file.name,
            'size': len(file_content),  # K√≠ch th∆∞·ªõc file
            'content': file_content.decode('utf-8', 'ignore')  # Gi·∫£i m√£ n·ªôi dung file th√†nh chu·ªói
        })
    
    # Hi·ªÉn th·ªã d·ªØ li·ªáu payload g·ª≠i ƒëi ƒë·ªÉ ki·ªÉm tra
    st.write("D·ªØ li·ªáu g·ª≠i ƒëi t·ª´ Streamlit: ")
    st.write(files_payload)

    try:
        response = requests.post(webhook_url, headers=headers, json={'files': files_payload})
        response.raise_for_status()  # Ki·ªÉm tra n·∫øu c√≥ l·ªói trong vi·ªác g·ª≠i
        return response.json()  # Tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ª´ n8n (v√≠ d·ª•: "Success")
    except Exception as e:
        st.error(f"Upload failed: {e}")
        return None

def main():
    """
    ·ª®ng d·ª•ng ch√≠nh c·ªßa chatbot CV AI v·ªõi ph·∫ßn upload nhi·ªÅu file.
    """
    st.set_page_config(page_title="CV Recruitment AI", page_icon="üíº")

    if 'session_id' not in st.session_state:
        st.session_state.session_id = generate_session_id()

    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []

    st.title("üíº CV Recruitment AI Assistant")
    st.write("An AI assistant to help find the most suitable candidates for your job description.")

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
    for message in st.session_state.chat_history:
        with st.chat_message(message['role']):
            st.markdown(message['content'])

    # Giai ƒëo·∫°n 2: X·ª≠ l√Ω input c·ªßa ng∆∞·ªùi d√πng v√† g·ª≠i qua webhook chat
    if prompt := st.chat_input("Enter your job description or candidate search query"):
        st.session_state.chat_history.append({
            'role': 'user',
            'content': prompt
        })

        with st.chat_message('user'):
            st.markdown(prompt)

        with st.chat_message('assistant'):
            with st.spinner('Searching for matching candidates...'):
                llm_response = send_message_to_llm(
                    st.session_state.session_id,
                    prompt
                )
                st.markdown(llm_response)

        st.session_state.chat_history.append({
            'role': 'assistant',
            'content': llm_response
        })

    # Ph·∫ßn sidebar ƒë·ªÉ upload nhi·ªÅu file (kh√¥ng r√†ng bu·ªôc v√†o PDF)
    with st.sidebar:
        st.title("Upload Files")
        uploaded_files = st.file_uploader("Upload your files", accept_multiple_files=True)

        if st.button("Submit & Process"):
            if uploaded_files:
                with st.spinner("Uploading files to n8n..."):
                    response = send_pdfs_to_n8n(uploaded_files)  # G·ª≠i file t·ªõi n8n
                    if response:
                        st.success("Files uploaded and processed successfully.")
                        st.write(response)  # Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ª´ n8n (v√≠ d·ª•: "Success")
            else:
                st.warning("Please upload at least one file.")

if __name__ == "__main__":
    main()
