import streamlit as st
import openai
import pinecone
import uuid
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter

# C·∫•u h√¨nh OpenAI v√† Pinecone
def configure_openai(api_key):
    openai.api_key = api_key

def configure_pinecone(api_key):
    pinecone.init(api_key=api_key, environment="us-west1-gcp")
    return pinecone.Index("cvdataset")

# K·∫øt n·ªëi v·ªõi Pinecone
index = None

# T·∫°o session ID duy nh·∫•t cho m·ªói phi√™n l√†m vi·ªác
def generate_session_id():
    return str(uuid.uuid4())

# ƒê·ªçc v√† tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ file PDF
def read_pdfs(pdf_files):
    text = ""
    for pdf in pdf_files:
        pdf_reader = PdfReader(pdf)
        for page in pdf_reader.pages:
            text += page.extract_text()
    return text

# Chia nh·ªè vƒÉn b·∫£n n·∫øu qu√° d√†i (split)
def split_text(text, chunk_size=8000):
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=chunk_size, chunk_overlap=200)
    return text_splitter.split_text(text)

# T·∫°o embedding t·ª´ vƒÉn b·∫£n b·∫±ng OpenAI
def create_embedding_from_text(text):
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",  # Ho·∫∑c GPT-4 t√πy theo phi√™n b·∫£n b·∫°n s·ª≠ d·ª•ng
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": text},
        ],
    )
    embeddings = response['choices'][0]['message']['content']
    return embeddings

# Ch√®n d·ªØ li·ªáu v√†o Pinecone
def upload_to_pinecone(file_name, content, embeddings):
    metadata = {
        "file_name": file_name,
        "content": content[:500]  # Tr√≠ch xu·∫•t ph·∫ßn ƒë·∫ßu c·ªßa n·ªôi dung ƒë·ªÉ l√†m metadata
    }

    # T·∫°o vector cho file v√† ƒë∆∞a v√†o Pinecone
    upsert_response = index.upsert(
        vectors=[(str(uuid.uuid4()), embeddings, metadata)]
    )
    return upsert_response

# Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa API Key
def validate_api_key(api_key):
    try:
        configure_openai(api_key)  # Ki·ªÉm tra k·∫øt n·ªëi v·ªõi OpenAI
        openai.ChatCompletion.create(model="gpt-3.5-turbo", prompt="Test", max_tokens=5)  # Th·ª≠ g·ªçi API
        return True
    except Exception as e:
        st.error(f"Invalid API Key: {e}")
        return False

# Main function ƒë·ªÉ x·ª≠ l√Ω t·∫•t c·∫£ c√°c b∆∞·ªõc
def main():
    global index

    st.set_page_config(page_title="CV Recruitment AI", page_icon="üíº")

    # Giao di·ªán nh·∫≠p API key
    api_key = st.sidebar.text_input("Enter your OpenAI API Key:")
    if api_key and validate_api_key(api_key):
        configure_openai(api_key)
        index = configure_pinecone(api_key)  # K·∫øt n·ªëi Pinecone v·ªõi API Key h·ª£p l·ªá

        st.sidebar.success("API Key validated successfully!")

        # Sau khi x√°c th·ª±c API Key, cho ph√©p ng∆∞·ªùi d√πng t·∫£i l√™n c√°c PDF
        uploaded_files = st.file_uploader("Upload PDF Files", accept_multiple_files=True)

        if uploaded_files:
            with st.spinner("Processing files..."):
                for file in uploaded_files:
                    # ƒê·ªçc vƒÉn b·∫£n t·ª´ file PDF
                    raw_text = read_pdfs([file])

                    # Chia nh·ªè vƒÉn b·∫£n n·∫øu c·∫ßn
                    text_chunks = split_text(raw_text)

                    # T·∫°o embeddings t·ª´ vƒÉn b·∫£n ƒë√£ chia nh·ªè
                    embeddings_list = []
                    for chunk in text_chunks:
                        embeddings = create_embedding_from_text(chunk)
                        embeddings_list.append(embeddings)

                    # Ch√®n v√†o Pinecone
                    for embeddings, chunk in zip(embeddings_list, text_chunks):
                        response = upload_to_pinecone(file.name, chunk, embeddings)
                        st.success(f"‚úÖ File {file.name} processed and uploaded to Pinecone successfully!")
        else:
            st.warning("‚ö†Ô∏è Please upload at least one file.")
    else:
        st.sidebar.warning("Please enter a valid OpenAI API Key to proceed.")

if __name__ == "__main__":
    main()
